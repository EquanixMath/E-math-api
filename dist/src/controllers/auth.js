import User, { UserRole, UserStatus } from '../models/User.js';
import BlacklistedToken from '../models/BlacklistedToken.js';
import { JWT_SECRET, ALLOWED_USERNAME } from '../config/env.js';
import jwt from 'jsonwebtoken';
import mongoose from 'mongoose';
/**
 * ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Student (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å Admin)
 */
export const registerStudent = async (req, res) => {
    try {
        const { username, password, firstName, lastName, nickname, school, purpose } = req.body;
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (!username || !password || !firstName || !lastName || !school || !purpose) {
            return res.status(400).json({
                message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (username, password, firstName, lastName, school, purpose)'
            });
        }
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingUser = await User.findOne({ username: username.toLowerCase() });
        if (existingUser) {
            return res.status(400).json({ message: 'Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });
        }
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö student (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ pending)
        const user = new User({
            username: username.toLowerCase(),
            password,
            role: UserRole.STUDENT,
            status: UserStatus.PENDING,
            firstName: firstName.trim(),
            lastName: lastName.trim(),
            nickname: nickname?.trim(),
            school: school.trim(),
            purpose: purpose.trim()
        });
        await user.save();
        return res.status(201).json({
            message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
            user: {
                id: user._id,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                status: user.status
            }
        });
    }
    catch (error) {
        console.error('Register student error:', error);
        return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }
};
/**
 * ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ username ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
 */
export const registerAdmin = async (req, res) => {
    try {
        const { username, password } = req.body;
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô username ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
        if (username !== ALLOWED_USERNAME) {
            return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢ username ‡∏ô‡∏µ‡πâ' });
        }
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ admin ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingAdmin = await User.findOne({ role: UserRole.ADMIN });
        if (existingAdmin) {
            return res.status(400).json({ message: '‡∏°‡∏µ Admin ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' });
        }
        const user = new User({
            username,
            password,
            role: UserRole.ADMIN,
            status: UserStatus.APPROVED // Admin ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        });
        await user.save();
        return res.status(201).json({ message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Admin ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' });
    }
    catch (error) {
        console.error('Register admin error:', error);
        return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }
};
/**
 * ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
 */
export const login = async (req, res) => {
    try {
        const { username, password } = req.body;
        if (!username || !password) {
            return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password' });
        }
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user
        const user = await User.findOne({ username: username.toLowerCase() });
        if (!user) {
            return res.status(400).json({ message: 'Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö password
        const isMatch = await user.comparePassword(password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á user
        if (user.status === UserStatus.PENDING) {
            return res.status(403).json({
                message: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
                status: 'pending'
            });
        }
        if (user.status === UserStatus.REJECTED) {
            const reason = user.rejectionReason || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•';
            return res.status(403).json({
                message: `‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}`,
                status: 'rejected'
            });
        }
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
        const tokenPayload = {
            id: user._id,
            username: user.username,
            role: user.role,
            status: user.status
        };
        const token = jwt.sign(tokenPayload, JWT_SECRET, { expiresIn: '24h' });
        return res.json({
            message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            token,
            user: {
                id: user._id,
                username: user.username,
                role: user.role,
                status: user.status,
                firstName: user.firstName,
                lastName: user.lastName,
                nickname: user.nickname,
                school: user.school
            }
        });
    }
    catch (error) {
        console.error('Login error:', error);
        return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }
};
/**
 * ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
 */
export const profile = async (req, res) => {
    try {
        const userId = req.user?.id;
        const user = await User.findById(userId).select('-password');
        if (!user) {
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User' });
        }
        return res.json({
            user: user.getPublicProfile()
        });
    }
    catch (error) {
        console.error('Profile error:', error);
        return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }
};
/**
 * ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡πÄ‡∏Ç‡πâ‡∏≤ blacklist)
 */
export const logout = async (req, res) => {
    try {
        const authHeader = req.headers.authorization;
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            return res.status(401).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Token' });
        }
        const token = authHeader.split(' ')[1];
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° token ‡πÄ‡∏Ç‡πâ‡∏≤ blacklist
        await BlacklistedToken.create({ token });
        console.log('Token blacklisted successfully:', token.substring(0, 20) + '...');
        return res.json({ message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' });
    }
    catch (error) {
        console.error('Logout error:', error);
        return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö' });
    }
};
/**
 * ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Student ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
 */
export const getPendingStudents = async (req, res) => {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin
        if (req.user?.role !== UserRole.ADMIN) {
            return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
        }
        const pendingStudents = await User.find({
            role: UserRole.STUDENT,
            status: UserStatus.PENDING
        })
            .select('-password')
            .sort({ createdAt: -1 });
        return res.json({
            students: pendingStudents.map(student => student.getPublicProfile()),
            total: pendingStudents.length
        });
    }
    catch (error) {
        console.error('Get pending students error:', error);
        return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }
};
/**
 * ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Student (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
 */
export const approveStudent = async (req, res) => {
    try {
        console.log('üîç Approve student request:', {
            user: req.user,
            studentId: req.params.studentId,
            userRole: req.user?.role,
            userStatus: req.user?.status
        });
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin
        if (req.user?.role !== UserRole.ADMIN) {
            console.log('‚ùå Access denied - not admin');
            return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
        }
        const { studentId } = req.params;
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ObjectId
        if (!mongoose.Types.ObjectId.isValid(studentId)) {
            console.log('‚ùå Invalid student ID:', studentId);
            return res.status(400).json({ message: 'Student ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }
        const student = await User.findById(studentId);
        if (!student) {
            console.log('‚ùå Student not found:', studentId);
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Student ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' });
        }
        console.log('üîç Found student:', {
            id: student._id,
            username: student.username,
            role: student.role,
            status: student.status
        });
        if (student.role !== UserRole.STUDENT) {
            console.log('‚ùå User is not a student');
            return res.status(400).json({ message: 'User ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Student' });
        }
        if (student.status !== UserStatus.PENDING) {
            console.log('‚ùå Student is not pending');
            return res.status(400).json({ message: 'Student ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' });
        }
        // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Student
        student.status = UserStatus.APPROVED;
        student.approvedBy = new mongoose.Types.ObjectId(req.user.id);
        student.approvedAt = new Date();
        await student.save();
        console.log('‚úÖ Student approved successfully:', student._id);
        return res.json({
            message: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Student ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
            student: student.getPublicProfile()
        });
    }
    catch (error) {
        console.error('Approve student error:', error);
        return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }
};
/**
 * ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Student (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
 */
export const rejectStudent = async (req, res) => {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin
        if (req.user?.role !== UserRole.ADMIN) {
            return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
        }
        const { studentId } = req.params;
        const { reason } = req.body;
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ObjectId
        if (!mongoose.Types.ObjectId.isValid(studentId)) {
            return res.status(400).json({ message: 'Student ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }
        const student = await User.findById(studentId);
        if (!student) {
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Student ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' });
        }
        if (student.role !== UserRole.STUDENT) {
            return res.status(400).json({ message: 'User ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Student' });
        }
        if (student.status !== UserStatus.PENDING) {
            return res.status(400).json({ message: 'Student ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' });
        }
        // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Student
        student.status = UserStatus.REJECTED;
        student.rejectedAt = new Date();
        student.rejectionReason = reason || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•';
        await student.save();
        return res.json({
            message: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Student ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
            student: student.getPublicProfile()
        });
    }
    catch (error) {
        console.error('Reject student error:', error);
        return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }
};
/**
 * ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Student ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin)
 */
export const getAllStudents = async (req, res) => {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin
        if (req.user?.role !== UserRole.ADMIN) {
            return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
        }
        const { status, page = 1, limit = 10 } = req.query;
        const pageNum = parseInt(page);
        const limitNum = parseInt(limit);
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter
        const filter = { role: UserRole.STUDENT };
        if (status && Object.values(UserStatus).includes(status)) {
            filter.status = status;
        }
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• students ‡∏û‡∏£‡πâ‡∏≠‡∏° pagination
        const students = await User.find(filter)
            .select('-password')
            .populate('approvedBy', 'username')
            .sort({ createdAt: -1 })
            .skip((pageNum - 1) * limitNum)
            .limit(limitNum);
        const total = await User.countDocuments(filter);
        return res.json({
            students: students.map(student => student.getPublicProfile()),
            pagination: {
                currentPage: pageNum,
                totalPages: Math.ceil(total / limitNum),
                totalItems: total,
                limit: limitNum
            }
        });
    }
    catch (error) {
        console.error('Get all students error:', error);
        return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }
};
